<?php

/**
 * Product:       Xtento_TrackingImport (2.0.5)
 * ID:            %!uniqueid!%
 * Packaged:      %!packaged!%
 * Last Modified: 2014-03-12T23:03:18+01:00
 * File:          app/code/local/Xtento/TrackingImport/Model/Source/Webservice.php.sample
 * Copyright:     Copyright (c) 2015 XTENTO GmbH & Co. KG <info@xtento.com> / All rights reserved.
 */

class Xtento_TrackingImport_Model_Source_Webservice extends Xtento_TrackingImport_Model_Source_Abstract
{
    /*
     * !!!!! IMPORTANT !!!!!
     *
     * Modify below this line. Add custom functions, similar to the function below. Must return parameter $filesToProcess as in example below.
     */
    public function yourFunctionName()
    {
        $filesToProcess = array();
        // Do whatever - sample code for a API request below, must be modified so that $fileContents contains the contents (CSV/XML/...) to import.
        /*$client = new Zend_Soap_Client("http://www.api.com/request.php?wsdl"); // Alternatively use SoapClient
        try {
            $result = $client->get_order_status(array('user' => 'abc'));
        } catch (SoapFault $e) {
            #echo $e->getMessage(); die();
        }
        if ($fileContents && !empty($fileContents)) {

        }*/

        $filesToProcess[] = array('source_id' => $this->getSource()->getId(), 'path' => '', 'filename' => 'http_download', 'data' => $fileContents); // Set a filename here. 'data' must contain the returned string from the HTTP source which will then be imported

        // Return files to process
        return $filesToProcess;
    }

    /*
     * !!!!! Do not modify below this line !!!!!
     */
    public function testConnection()
    {
        $this->initConnection();
        return $this->getTestResult();
    }

    public function initConnection()
    {
        $this->setSource(Mage::getModel('xtento_trackingimport/source')->load($this->getSource()->getId()));
        $testResult = new Varien_Object();
        $this->setTestResult($testResult);
        if (!@method_exists($this, $this->getSource()->getCustomFunction())) {
            $this->getTestResult()->setSuccess(false)->setMessage(Mage::helper('xtento_trackingimport')->__('Custom function/method \'%s\' not found in %s.', $this->getSource()->getCustomFunction(), __FILE__));
        } else {
            $this->getTestResult()->setSuccess(true)->setMessage(Mage::helper('xtento_trackingimport')->__('Custom function/method found and ready to use.', __FILE__));
        }
        $this->getSource()->setLastResult($this->getTestResult()->getSuccess())->setLastResultMessage($this->getTestResult()->getMessage())->save();
        return true;
    }

    public function loadFiles()
    {
        // Init connection
        $this->initConnection();
        // Call custom function
        $filesToProcess = @$this->{$this->getSource()->getCustomFunction()}();
        return $filesToProcess;
    }

    public function archiveFiles($filesToProcess, $forceDelete = false)
    {

    }
}